import os
import torch
from torch.utils.data import Dataset, DataLoader
import numpy as np
import cv2

def load_data(path, pad_size):
    data = []

    section = ['header', 'string_ids', 'type_ids', 'proto_ids', 'field_ids', 'method_ids', 'class_defs', 'dex_map_list',
               'string_items', 'type_item_list', 'class_data', 'code_item']
    for s in section:
        try:
            section_path = os.path.join(path, s)
            section_file = open(section_path, 'rb')
            tmp = section_file.read()
            if len(tmp) < pad_size:
                str = b'\x00'
                data.append(tmp + ((pad_size - len(tmp)) * str)) #for pad
            else:
                data.append(tmp)
        except FileNotFoundError:
            print(f"{section_path} is not exists")
    return data


class Android_loader(Dataset):
    def __init__(self, path, transform, pad_size=200):
        self.data = []
        self.label = []
        self.path = []
        self.transform = transform
        class_list = os.listdir(path)
        for _, i in enumerate(class_list):
            class_path = os.path.join(path, i)
            file_list = os.listdir(class_path)
            for j in (file_list):
                file_path = os.path.join(class_path, j)
                self.data.append(load_data(file_path,pad_size))
                self.label.append(_)
    def __getitem__(self, index):
        data = []
        for i in range(12):
            tmp = self.transform(np.asarray(list(self.data[index][i])).reshape(1,len(self.data[index][i]))).float().squeeze(dim=0)
            data.append(tmp/255)#Normalization
        return data, self.label[index]

    def __len__(self):
        return len(self.data)

class AM_CR_CL_loader(Dataset):
    def __init__(self, path, transform, pad_size, n_section, data_option=1):
        if data_option == 0:#using img
            section = ['header', 'string_ids', 'type_ids', 'proto_ids', 'field_ids', 'method_ids', 'class_defs', 'dex_map_list',
                       'string_items', 'type_item_list', 'class_data', 'code_item']
            rename_section = ['AM', 'CR.RSA', 'CR.SF'] + section
        elif data_option == 1:#using binary only
            section = ['AndroidManifest.xml', 'CERT.RSA','proto_ids','class_defs', 'string_items','code_item']
            rename_section = ['AM', 'CR.RSA'] + section

        self.data = []
        self.label = []
        self.path = []
        self.pad_size = pad_size
        self.transform = transform
        self.n_section = n_section
        class_list = os.listdir(path)
        for _, i in enumerate(class_list):
            file_class = os.path.join(path, i)
            file_list = os.listdir(file_class)
            for j in file_list:
                file_path = os.path.join(file_class, j)
                #self.data.append(load_data(file_path,pad_size))
                self.label.append(_)
                self.path.append(os.path.join(i, j.split('.')[0]))
                data = []

                img_lists = []
                if data_option == 0:
                    img_lists.append(os.path.join(path, i, j, 'img', 'AndroidManifest.xml.jpg'))
                    img_lists.append(os.path.join(path, i, j, 'img', 'CERT.RSA.jpg'))
                    img_lists.append(os.path.join(path, i, j, 'img', 'CERT.SF.jpg'))

                for k in range(len(img_lists)):
                    try:
                        img = cv2.imread(img_lists[k], cv2.IMREAD_GRAYSCALE)
                        img = img.reshape(img.shape[0] * img.shape[1])
                        if len(img) < self.pad_size:
                            img = np.hstack((img , np.zeros(self.pad_size - len(img))))
                        data.append(img)
                    except:
                        data.append(np.zeros((self.pad_size))) #if section does not exists, pad

                for s in range(len(section)):
                    try:
                        section_path = os.path.join(path, i,j, section[s])
                        section_file = open(section_path, 'rb')
                        tmp = section_file.read()
                        if len(tmp) < self.pad_size:
                            str = b'\x00'
                            data.append(tmp + ((self.pad_size - len(tmp)) * str)) #if section does not exists, pad
                        else:
                            data.append(tmp)
                    except FileNotFoundError:
                        print(f"{section_path} is not exists")
                        data.append(np.zeros(self.pad_size))
                self.data.append(data)

    def __getitem__(self, index):
        data = []
        for i in range(self.n_section):
            tmp = self.transform(np.asarray(list(self.data[index][i])).reshape(1,len(self.data[index][i]))).float().squeeze(dim=0)
            data.append(tmp/255)#Normalization
        return data, self.label[index]

    def __len__(self):
        return len(self.data)


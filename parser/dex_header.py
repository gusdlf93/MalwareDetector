# -*- coding:utf-8 -*-
import struct


VALUE_BYTE = 0x00
VALUE_SHORT = 0x02
VALUE_CHAR = 0x03
VALUE_INT = 0x04
VALUE_LONG = 0x06
VALUE_FLOAT = 0x10
VALUE_DOUBLE = 0x11
VALUE_STRING = 0x17
VALUE_TYPE = 0x18
VALUE_FIELD = 0x19
VALUE_METHOD = 0x1a
VALUE_ENUM = 0x1b
VALUE_ARRAY = 0x1c
VALUE_ANNOTATION = 0x1d
VALUE_NULL = 0x1e
VALUE_BOOLEAN = 0x1f


def getValue(fp, arg):
    if arg == 0:
        return fp.read_byte()
    else:
        result = 0
        for i in range(arg + 1):
            result |= (fp.read_byte() << (8 * i))
        return result


class AnnotationElement:
    def __init__(self, fp):
        self.name_idx = fp.read_uleb128()
        self.encoded_value = EncodedValue(fp)


class EncodedAnnotation:
    def __init__(self, fp):
        self.type_idx = fp.read_uleb128()
        self.element_size = fp.read_uleb128()
        self.elements = []
        for i in range(self.element_size):
            self.elements.append(AnnotationElement(fp))


class AnnotationItem:
    VISIBILITY = {
        0x0: "build",
        0x1: "runtime",
        0x2: "system",
    }

    def __init__(self, fp):
        self.visibility = self.VISIBILITY[fp.read_byte()]
        self.annotation = EncodedAnnotation(fp)


class EncodedValue:
    def __init__(self, fp):
        self.fp = fp
        tmp = fp.read_byte()
        self.value_type = tmp & 0x1F
        self.value_arg = (tmp & 0xE0) >> 5
        self.value = self.getValue()

    def __get_boolean(self):
        if self.value_arg == 0:
            return "false"
        else:
            return "true"

    def __get_encoded_array(self):
        result = []
        size = self.fp.read_uleb128()
        for i in range(size):
            e = EncodedValue(self.fp)
            result.append(e)
        return result

    def getValue(self):
        # array type
        if self.value_type == VALUE_ARRAY:
            return self.__get_encoded_array()

        # enum type
        elif self.value_type == VALUE_TYPE or \
            self.value_type == VALUE_STRING or \
            self.value_type == VALUE_CHAR or \
            self.value_type == VALUE_METHOD or \
            self.value_type == VALUE_ENUM or \
            self.value_type == VALUE_INT or \
            self.value_type == VALUE_LONG or \
            self.value_type == VALUE_SHORT or \
            self.value_type == VALUE_BYTE or \
            self.value_type == VALUE_FIELD:
            return getValue(self.fp, self.value_arg)

        elif self.value_type == VALUE_FLOAT:
            data = self.fp.read(self.value_arg+1)
            t = ("\x00" * (4 - len(data))) + data
            f = struct.unpack('<f', t)[0]

            return f

        elif self.value_type == VALUE_DOUBLE:

            data = self.fp.read(self.value_arg + 1)

            t = ("\x00" * (8 - len(data))) + data
            f = struct.unpack('<d', t)[0]

            return f

        elif self.value_type == VALUE_BOOLEAN:
            return self.__get_boolean()

        elif self.value_type == VALUE_ANNOTATION:
            return EncodedAnnotation(self.fp)

        elif self.value_type == VALUE_NULL:
            return "null"

        else:
            print "[!!!!!!!!!]", self.value_type


class AnnotationSetItem:
    def __init__(self, fp):
        self.start = fp.tell()
        nItem = fp.read_dword()
        item_offset_list = []
        self.items = []
        self.item_list = []

        for i in range(nItem):
            off = fp.read_dword()
            if off == 0:
                continue
            item_offset_list.append(off)
        self.size = fp.tell() - self.start

        # print hex(self.start), hex(self.size)

        for off in item_offset_list:
            if off != 0:
                fp.seek(off)

                self.items.append(AnnotationItem(fp))
                self.item_list.append((off, fp.tell() - off))


class AnnotationSetRefItem:
    def __init__(self, fp):
        self.start = fp.tell()
        nItem = fp.read_dword()
        self.items = []
        self.item_list = []
        item_offset_list = []
        for i in range(nItem):
            item_offset_list.append(fp.read_dword())
        self.size = fp.tell() - self.start

        for off in item_offset_list:
            if off != 0:
                fp.seek(off)

                annoItem = AnnotationSetItem(fp)
                self.items.append(annoItem)
                self.item_list.append((annoItem.start, annoItem.size))
                self.item_list += annoItem.item_list


class Annotations:
    def __init__(self, fp):
        self.start = fp.tell()
        self.class_annotations_off = fp.read_dword()
        self.class_annotations = None
        self.fields_size = fp.read_dword()
        self.methods_size = fp.read_dword()
        self.parameters_size = fp.read_dword()
        self.fields_list = []
        self.methods_list = []
        self.parameters_list = []
        self.fields_annotations = {}
        self.methods_annotations = {}
        self.parameters_annotations = {}
        self.anno_item_list = []

        for i in range(self.fields_size):
            idx = fp.read_dword()
            off = fp.read_dword()
            self.fields_list.append([idx, off])

        for i in range(self.methods_size):
            idx = fp.read_dword()
            off = fp.read_dword()
            self.methods_list.append([idx, off])

        for i in range(self.parameters_size):
            idx = fp.read_dword()
            off = fp.read_dword()
            self.parameters_list.append([idx, off])
        self.size = fp.tell() - self.start

        # print hex(self.size)
        fp.seek(self.class_annotations_off)

        if self.class_annotations_off != 0:
            self.class_annotations = AnnotationSetItem(fp)
            self.anno_item_list.append((self.class_annotations.start, self.class_annotations.size))
            for i in self.class_annotations.item_list:
                self.anno_item_list.append(i)

        for i in self.fields_list:
            fp.seek(i[1])
            self.fields_annotations[i[0]] = AnnotationSetItem(fp)
            self.anno_item_list.append((self.fields_annotations[i[0]].start, self.fields_annotations[i[0]].size))
            for i in self.fields_annotations[i[0]].item_list:
                self.anno_item_list.append(i)
        for i in self.methods_list:
            fp.seek(i[1])
            self.methods_annotations[i[0]] = AnnotationSetItem(fp)
            self.anno_item_list.append((self.methods_annotations[i[0]].start, self.methods_annotations[i[0]].size))
            for i in self.methods_annotations[i[0]].item_list:
                self.anno_item_list.append(i)

        for i in self.parameters_list:
            fp.seek(i[1])
            self.parameters_annotations[i[0]] = AnnotationSetRefItem(fp)
            self.anno_item_list.append((self.parameters_annotations[i[0]].start, self.parameters_annotations[i[0]].size))


class ClassDef:
    """
    Class item def struct
    """

    def __init__(self, fp):
        self.class_idx = fp.read_dword()
        self.access_flags = fp.read_dword()
        self.superclass_idx = fp.read_dword()
        self.interfaces_off = fp.read_dword()
        self.source_file_idx = fp.read_dword()
        self.annotations_off = fp.read_dword()
        self.annotations = None
        self.class_data_off = fp.read_dword()
        self.class_data_item = None
        self.static_values_off = fp.read_dword()
        self.static_values = None


class EncodedMethod:
    def __init__(self, fp, prev):
        self.method_idx = fp.read_uleb128() + prev
        self.access_flags = fp.read_uleb128()
        self.code_off = fp.read_uleb128()
        self.code_item = None


class ClassData:
    """
    Class data struct
    """

    def __init__(self, fp):
        self.start = fp.tell()
        self.size = 0
        self.static_field_size = fp.read_uleb128()
        self.instance_field_size = fp.read_uleb128()
        self.direct_method_size = fp.read_uleb128()
        self.virtual_method_size = fp.read_uleb128()
        self.static_field_list = []
        self.instance_field_list = []
        self.direct_method_list = []
        self.virtual_method_list = []

        self.code_item_list = []

        prev = -1
        for i in range(self.static_field_size):
            if prev != -1:
                prev += fp.read_uleb128()
            else:
                prev = fp.read_uleb128()
            self.static_field_list.append([prev, fp.read_uleb128()])  # field_idx, access_flags

        prev = -1
        for i in range(self.instance_field_size):
            if prev != -1:
                prev += fp.read_uleb128()
            else:
                prev = fp.read_uleb128()
            self.instance_field_list.append([prev, fp.read_uleb128()])  # field_idx, access_flags

        prev = 0
        for i in range(self.direct_method_size):
            em = EncodedMethod(fp, prev)
            self.direct_method_list.append(em)
            prev = em.method_idx

        prev = 0
        for i in range(self.virtual_method_size):
            em = EncodedMethod(fp, prev)
            self.virtual_method_list.append(em)
            prev = em.method_idx

        self.size = fp.tell() - self.start

        for method in self.direct_method_list:
            if method.code_off == 0:
                continue
            fp.seek(method.code_off)
            method.code_item = CodeItem(fp)
            self.code_item_list.append((method.code_item.start, method.code_item.size))

        for method in self.virtual_method_list:
            if method.code_off == 0:
                continue
            fp.seek(method.code_off)
            method.code_item = CodeItem(fp)
            self.code_item_list.append((method.code_item.start, method.code_item.size))


class MethodItem:
    """
    Method item struct
    """

    def __init__(self, fp):
        self.class_idx = fp.read_word()
        self.proto_idx = fp.read_word()
        self.name_idx = fp.read_dword()


class TryItem:
    def __init__(self, fp):
        self.start_addr = fp.read_dword()
        self.insn_count = fp.read_word()
        self.handler_off = fp.read_word()


class CodeItem:
    def __init__(self, fp):
        self.start = fp.tell()
        self.register_size = fp.read_word()
        self.ins_size = fp.read_word()
        self.outs_size = fp.read_word()
        self.tries_size = fp.read_word()
        self.debug_info_off = fp.read_dword()
        self.insns_size = fp.read_dword()
        self.insns = fp.read(self.insns_size * 2)
        self.try_list = []
        self.catch_handler = {}

        r = (self.insns_size * 2) % 4
        if r != 0:
            padding = fp.read(r)

        if self.tries_size != 0:
            # catch_handler_base = fp.tell() + (self.tries_size * 8)
            for i in range(self.tries_size):
                self.try_list.append(TryItem(fp))

            prev = fp.tell()
            if prev == 0x2158B4:
                None
            handler_count = fp.read_uleb128()

            for j in range(handler_count):
                off = fp.tell() - prev
                handler_size = fp.read_sleb128()
                self.catch_handler[off] = []
                # catch all
                if handler_size == 0:
                    self.catch_handler[off].append([fp.read_uleb128()])
                elif handler_size < 0:
                    for k in range(handler_size * -1):
                        self.catch_handler[off].append([fp.read_uleb128(), fp.read_uleb128()])
                    self.catch_handler[off].append([fp.read_uleb128()])
                else:   # handler
                    for k in range(handler_size):
                        self.catch_handler[off].append([fp.read_uleb128(), fp.read_uleb128()])

        self.size = (fp.tell() - self.start)


class FieldItem:
    """
    Field item struct
    """

    def __init__(self, fp):
        self.class_idx = fp.read_word()
        self.proto_idx = fp.read_word()
        self.name_idx = fp.read_dword()


class ProtoItem:
    """
    Prototype item struct
    """

    def __init__(self, fp):
        self.shorty_idx = fp.read_dword()
        self.return_type_idx = fp.read_dword()
        self.parameters_off = fp.read_dword()


class DexHeader:
    """
    DEX header struct
    """

    def __init__(self, fp):
        self.magic = fp.read(8)
        self.checksum = fp.read_dword()
        self.signature = fp.read(20)
        self.file_size = fp.read_dword()
        self.header_size = fp.read_dword()
        self.endian_tag = fp.read_dword()
        self.link_size = fp.read_dword()
        self.link_off = fp.read_dword()
        self.map_off = fp.read_dword()
        self.string_ids_size = fp.read_dword()
        self.string_ids_off = fp.read_dword()
        self.type_ids_size = fp.read_dword()
        self.type_ids_off = fp.read_dword()
        self.proto_ids_size = fp.read_dword()
        self.proto_ids_off = fp.read_dword()
        self.field_ids_size = fp.read_dword()
        self.field_ids_off = fp.read_dword()
        self.method_ids_size = fp.read_dword()
        self.method_ids_off = fp.read_dword()
        self.class_defs_size = fp.read_dword()
        self.class_defs_off = fp.read_dword()
        self.data_size = fp.read_dword()
        self.data_off = fp.read_dword()


class MapItem:
    """
    Map item struct
    """

    def __init__(self, fp):
        self.type = fp.read_word()
        self.unused = fp.read_word()
        self.size = fp.read_dword()
        self.offset = fp.read_dword()

# -*- coding:utf-8 -*-

"""
    Created by S.H.Kim (sungho.kim@nhnent.com)
    APK 처리 메인 코드
"""
import subprocess
import traceback
import os
import shutil
import mmap
import json
import re
import __builtin__
import traceback
import time 
import sys
import zipfile
import numpy as np

# 제작모듈
import util


class APK:
    def __init__(self, apkname):
        self.apkname = apkname
        self.dexList = []    
        self.manifest = None    # android manifest
        self.resource = None    # 리소스 정보
        self.dexFileHandle = []
        self.dexHandleList = []
        self.workspace = "workspace"
        self.userDefinedClassList = []
        self.userDefinedMethodList = []
        self.importClassList = []
        self.man = None
        self.apiList = []
        self.__extract()
        self.__parseDex()
        #self.__parseManifest()
        
    def __extract(self):
        self.workspace = os.path.join(self.workspace, self.apkname.split('\\')[-2])
            
        zp = zipfile.ZipFile(self.apkname)
        for name in zp.namelist():
            if ".dex" in name:
                rename = os.path.join(self.workspace, self.apkname.split('\\')[-1] + '.dex')
                if not os.path.exists(rename.split('.dex')[0]):
                    os.makedirs(rename.split('.dex')[0])
                zp.extract(name, self.workspace)
                os.rename(os.path.join(self.workspace, name),rename)
                self.dexList.append(rename)


                #zp.extract(self.apkname.split('\\')[-1] + '.dex', self.workspace)
            # elif "AndroidManifest" in name:
            #     self.manifest = os.path.join(self.workspace, "AndroidManifest.xml")
            #     zp.extract(name, self.workspace)
                
    def __parseDex(self):
        import dex as _d
        for dexFile in self.dexList:
            with open(dexFile, "r") as fp:
                mm = mmap.mmap(fp.fileno(), 0, access=mmap.ACCESS_READ)
                d = _d.DEX(mm, dexFile)  # 덱스 처리
                self.dexHandleList.append(d)
                self.dexFileHandle.append([fp, mm])
                
        for d in self.dexHandleList:
            for classId in d.getClassList():
                hClass = d.getClass(classId)
                self.userDefinedClassList.append( hClass.getFullName())
                for hMethod in hClass.getMethodList():
                    self.userDefinedMethodList.append( hMethod.getOrigFullName(_type="method"))

        for d in self.dexHandleList:        
            for methodId in range(len(d.getMethodTable())):
                hMethod = d.getMethod(methodId)
                className = hMethod.getClass()
                methodName = hMethod.getOrigFullName(_type="method")
                if className not in self.importClassList and className not in self.userDefinedClassList:
                    self.importClassList.append(className)
                
                if methodName not in self.apiList and methodName not in self.userDefinedMethodList:
                    self.apiList.append(methodName)
                                    
    def __parseManifest(self):
        import androidmanifest
        self.man = androidmanifest.Manifest(self.manifest)

    def getClassList(self):
        '''
        import class 리스트 반환
        '''
        return self.importClassList
        
    def getAPIList(self):
        '''
        API 리스트 반환
        '''
        return self.apiList
        
    def getPERMList(self):
        '''
        퍼미션 리스트 반환
        '''
        return self.man.perm
    
if __name__ == "__main__":
    # if len(sys.argv) < 2:
    #     print "Usage : apk.py filename"
    #     sys.exit(0)

    section = ['dex_map_list', 'string_items', 'code_item', 'header', 'string_ids', 'field_ids', 'type_item_list',
               'type_ids', 'proto_ids', 'class_data', 'method_ids', 'class_defs']

    for root, dirs, files in os.walk(r"F:\android\dataset_20"):
        for file in files:
            #file_list.append(os.path.join(root, file))
            try:
                apk = APK(os.path.join(root, file))
                data = apk.dexFileHandle[0][1]
                for s in section:
                    size = apk.dexHandleList[0].dataOffset[s]['size']
                    offset = apk.dexHandleList[0].dataOffset[s]['offset']
                    tmp = data[offset:offset+size]

                    dest = os.path.join(r'F:\android\parse_dex\workspace', root.split('\\')[-1], file, s)
                    fd = open(dest, 'wb')
                    fd.write(tmp)
                    fd.close()
            except:
                print(file)
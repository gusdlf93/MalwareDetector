# -*- coding:utf-8 -*-

"""
    Created by S.H.Kim (sungho.kim@nhnent.com)
    APK 처리 메인 코드
"""
import subprocess
import traceback
import os
import shutil
import mmap
import json
import re
import __builtin__
import traceback
import time
import sys
import zipfile
import numpy as np
import pandas as pd
# 제작모듈
import util


class APK:
    def __init__(self, apkname):
        self.apkname = apkname
        self.dexList = []
        self.manifest = None    # android manifest
        self.resource = None    # 리소스 정보
        self.dexFileHandle = []
        self.dexHandleList = []
        self.workspace = "workspace"
        self.userDefinedClassList = []
        self.userDefinedMethodList = []
        self.importClassList = []
        self.man = None
        self.apiList = []
        self.__extract()
        self.__parseDex()
        #self.__parseManifest()

    def __extract(self):
        self.workspace = os.path.join(self.workspace, self.apkname.split('\\')[-2])

        zp = zipfile.ZipFile(self.apkname)
        for name in zp.namelist():
            if ".dex" in name:
                rename = os.path.join(self.workspace, self.apkname.split('\\')[-1] + '.dex')
                if not os.path.exists(rename.split('.dex')[0]):
                    os.makedirs(rename.split('.dex')[0])
                zp.extract(name, self.workspace)
                os.rename(os.path.join(self.workspace, name),rename)
                self.dexList.append(rename)


                #zp.extract(self.apkname.split('\\')[-1] + '.dex', self.workspace)
            # elif "AndroidManifest" in name:
            #     self.manifest = os.path.join(self.workspace, "AndroidManifest.xml")
            #     zp.extract(name, self.workspace)

    def __parseDex(self):
        import dex as _d
        for dexFile in self.dexList:
            with open(dexFile, "r") as fp:
                mm = mmap.mmap(fp.fileno(), 0, access=mmap.ACCESS_READ)
                d = _d.DEX(mm, dexFile)  # 덱스 처리
                self.dexHandleList.append(d)
                self.dexFileHandle.append([fp, mm])

        for d in self.dexHandleList:
            for classId in d.getClassList():
                hClass = d.getClass(classId)
                self.userDefinedClassList.append( hClass.getFullName())
                for hMethod in hClass.getMethodList():
                    self.userDefinedMethodList.append( hMethod.getOrigFullName(_type="method"))

        for d in self.dexHandleList:
            for methodId in range(len(d.getMethodTable())):
                hMethod = d.getMethod(methodId)
                className = hMethod.getClass()
                methodName = hMethod.getOrigFullName(_type="method")
                if className not in self.importClassList and className not in self.userDefinedClassList:
                    self.importClassList.append(className)

                if methodName not in self.apiList and methodName not in self.userDefinedMethodList:
                    self.apiList.append(methodName)

    def __parseManifest(self):
        import androidmanifest
        self.man = androidmanifest.Manifest(self.manifest)

    def getClassList(self):
        '''
        import class 리스트 반환
        '''
        return self.importClassList

    def getAPIList(self):
        '''
        API 리스트 반환
        '''
        return self.apiList

    def getPERMList(self):
        '''
        퍼미션 리스트 반환
        '''
        return self.man.perm

if __name__ == "__main__":
    # if len(sys.argv) < 2:
    #     print "Usage : apk.py filename"
    #     sys.exit(0)

    section = ['header', 'string_ids', 'type_ids', 'proto_ids', 'field_ids', 'method_ids', 'class_defs', 'dex_map_list',
               'string_items', 'type_item_list', 'class_data', 'code_item']

    txt_path = r'D:\android\Data\data_sec_20_txt\conv1d_4_grad_sec'

    for root, dirs, files in os.walk(r"F:\android\dataset_20"):
        for file in files: #파일이 있는지 확인
            #file_list.append(os.path.join(root, file))
            try:
                apk = APK(os.path.join(root, file))
                label = root.split('\\')[-1]
                data = open(os.path.join(r'F:\android\parse_dex\workspace',label,file,'classes.dex'), 'rb')
                data = data.read()
            except :
                print(file)
                continue
            try:#이거는 gradcam으로부터 가장 영향력이 큰 범위 가져오기
                dex_path = r'F:\android\parse_dex\workspace'
                #get txt path

                malware_label_txt_path = os.path.join(txt_path, label)
                #mal_np = pd.read_csv(os.path.join(malware_label_txt_path, file+'.csv'))
                mal_np = open(os.path.join(malware_label_txt_path, file+'.csv'), 'r')
                mal_np = mal_np.readlines()
                if len(mal_np) == 1:
                    mal_np = np.asarray(mal_np[0].split()[0].split(','))
                    mal_np = mal_np.reshape(1, len(mal_np))
                else:
                    tmp = []
                    for i in range(len(mal_np)):
                        zero = mal_np[i].split()[0].split(',')
                        zero_list = []
                        for z in np.where(zero)[0]:
                            zero_list.append(zero[z])
                        tmp.append(zero_list)
                    mal_np = np.asarray(tmp)

                #mal_np = #np.load(os.path.join(malware_label_txt_path, file+'.npy'), allow_pickle=True)
            except:
                print('cant load training file because we do not make npy file')
                continue

            try:#이거는 gradcam 영역의 byte 가져오는 코드
                size_list = []
                offset_list = []
                section_list = []
                None_flag = 0
                if not os.path.isdir(os.path.join(r'F:\android\parse_dex\npy', root.split('\\')[-1])):
                    os.makedirs(os.path.join(r'F:\android\parse_dex\npy', root.split('\\')[-1]))

                section_byte = []
                for s in section:
                    section_byte.append(data[apk.dexHandleList[0].dataOffset[s]['offset']: apk.dexHandleList[0].dataOffset[s]['offset'] + apk.dexHandleList[0].dataOffset[s]['size']])
                data = []
                for s in range(len(section)):
                    data += section_byte[s]
                for m in range(len(mal_np)):
                    for s in section:
                        if float(mal_np[m][0]) > apk.dexHandleList[0].dataOffset[s]['offset'] and float(mal_np[m][-1])\
                            < (apk.dexHandleList[0].dataOffset[s]['offset'] + apk.dexHandleList[0].dataOffset[s]['size']):
                            section_list.append(s)
                            offset = []
                            for n in range(int(float(mal_np[m][0]))-5, int(float(mal_np[m][-1]))+5):
                                offset.append(hex(ord(data[n])))
                            offset_list.append(offset)
                            None_flag = 1
                    if None_flag == 0:
                        section_list.append('None')
                        offset = []
                        for n in range(int(float(mal_np[m][0])) - 5, int(float(mal_np[m][-1])) + 5):
                            try:
                                offset.append(hex(ord(data[n])))
                            except:
                                print("error")
                                offset.append(hex(ord(data[n])))
                        offset_list.append(offset)
                    None_flag = 0
                dest = os.path.join(r'F:\android\parse_dex\npy', root.split('\\')[-1], file)
                np.save(dest,np.array([section_list, offset_list]))
            except ValueError :
                print('something wrong')

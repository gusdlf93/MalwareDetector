# -*- coding:utf-8 -*-

"""
    Created by S.H.Kim (sungho.kim@nhnent.com)
    APK 처리 메인 코드
"""
import subprocess
import traceback
import os
import shutil
import mmap
import json
import re
import __builtin__
import traceback
import time
import sys
import zipfile
import numpy as np
import pandas as pd
# 제작모듈
import util


class APK:
    def __init__(self, apkname):
        self.apkname = apkname
        self.dexList = []
        self.manifest = None    # android manifest
        self.resource = None    # 리소스 정보
        self.dexFileHandle = []
        self.dexHandleList = []
        self.workspace = "workspace"
        self.userDefinedClassList = []
        self.userDefinedMethodList = []
        self.importClassList = []
        self.man = None
        self.apiList = []
        self.__extract()
        self.__parseDex()
        #self.__parseManifest()

    def __extract(self):
        self.workspace = os.path.join(self.workspace, self.apkname.split('\\')[-2], self.apkname.split('\\')[-1]) #F:\android\parse_dex\workspace, Adrd
        zp = zipfile.ZipFile(self.apkname)
        for name in zp.namelist():
            if ".dex" in name:
                rename = os.path.join(self.workspace, name)
                #rename = os.path.join(self.workspace, self.apkname.split('\\')[-1] + '.dex')
                # if not os.path.exists(rename.split('.dex')[0]):
                #     os.makedirs(rename.split('.dex')[0])
                zp.extract(name, self.workspace)
                #os.rename(os.path.join(self.workspace, name), rename)
                self.dexList.append(rename)

                # zp.extract(self.apkname.split('\\')[-1] + '.dex', self.workspace)
            elif "AndroidManifest" in name:
                self.manifest = os.path.join(self.workspace, "AndroidManifest.xml")
                zp.extract(name, self.workspace)
            elif "CERT" in name:
                rename = os.path.join(self.workspace, name)
                zp.extract(name, self.workspace)

        # self.workspace = os.path.join(self.workspace, self.apkname.split('\\')[-2])
        #
        # zp = zipfile.ZipFile(self.apkname)
        # for name in zp.namelist():
        #     if ".dex" in name:
        #         rename = os.path.join(self.workspace, self.apkname.split('\\')[-1] + '.dex')
        #         if not os.path.exists(rename.split('.dex')[0]):
        #             os.makedirs(rename.split('.dex')[0])
        #         zp.extract(name, self.workspace)
        #         os.rename(os.path.join(self.workspace, name),rename)
        #         self.dexList.append(rename)
        #
        #
        #         #zp.extract(self.apkname.split('\\')[-1] + '.dex', self.workspace)
        #     # elif "AndroidManifest" in name:
        #     #     self.manifest = os.path.join(self.workspace, "AndroidManifest.xml")
        #     #     zp.extract(name, self.workspace)

    def __parseDex(self):
        import dex as _d
        for dexFile in self.dexList:
            with open(dexFile, "r") as fp:
                mm = mmap.mmap(fp.fileno(), 0, access=mmap.ACCESS_READ)
                d = _d.DEX(mm, dexFile)  # 덱스 처리
                self.dexHandleList.append(d)
                self.dexFileHandle.append([fp, mm])

        for d in self.dexHandleList:
            for classId in d.getClassList():
                hClass = d.getClass(classId)
                self.userDefinedClassList.append( hClass.getFullName())
                for hMethod in hClass.getMethodList():
                    self.userDefinedMethodList.append( hMethod.getOrigFullName(_type="method"))

        for d in self.dexHandleList:
            for methodId in range(len(d.getMethodTable())):
                hMethod = d.getMethod(methodId)
                className = hMethod.getClass()
                methodName = hMethod.getOrigFullName(_type="method")
                if className not in self.importClassList and className not in self.userDefinedClassList:
                    self.importClassList.append(className)

                if methodName not in self.apiList and methodName not in self.userDefinedMethodList:
                    self.apiList.append(methodName)

    def __parseManifest(self):
        import androidmanifest
        self.man = androidmanifest.Manifest(self.manifest)

    def getClassList(self):
        '''
        import class 리스트 반환
        '''
        return self.importClassList

    def getAPIList(self):
        '''
        API 리스트 반환
        '''
        return self.apiList

    def getPERMList(self):
        '''
        퍼미션 리스트 반환
        '''
        return self.man.perm

if __name__ == "__main__":
    # if len(sys.argv) < 2:
    #     print "Usage : apk.py filename"
    #     sys.exit(0)

    section = ['header', 'string_ids', 'type_ids', 'proto_ids', 'field_ids', 'method_ids', 'class_defs', 'dex_map_list',
               'string_items', 'type_item_list', 'class_data', 'code_item']

    txt_path = r'D:\android\Data\data_sec_20_txt\conv1d_4_grad_sec'

    for root, dirs, files in os.walk(r"F:\android\dataset_20"):
        for file in files: #파일이 있는지 확인
            #file_list.append(os.path.join(root, file))
            try:
                apk = APK(os.path.join(root, file))
                label = root.split('\\')[-1]
                org_data = open(os.path.join(r'F:\android\parse_dex\workspace',label,file,'classes.dex'), 'rb')
                org_data = list(org_data.read())
            except :
                print(file)
                continue

            try:#이거는 offset하고 size 받아오는 코드 임
                None_flag = 0
                if not os.path.isdir(os.path.join(r'F:\android\parse_dex\offset', root.split('\\')[-1])):
                    os.makedirs(os.path.join(r'F:\android\parse_dex\offset', root.split('\\')[-1]))

                new_data = ''
                data = []
                for s in section:
                    s_offset = apk.dexHandleList[0].dataOffset[s]['offset'] #start offset of each sections
                    e_offset = apk.dexHandleList[0].dataOffset[s]['offset'] + apk.dexHandleList[0].dataOffset[s]['size'] #end offset of each sections
                    data.append([s_offset, e_offset])

                flag = np.ones((len(org_data)),dtype=bool)
                for r in range(len(data)):
                    flag[data[r][0] : data[r][1]] = False

                for r in range(len(flag)):
                    new_data += org_data[r] * flag[r]

                malware_family = root.split('\\')[-1]

                # dest = os.path.join(r'F:\android\parse_dex\offset', malware_family, file)
                # np.save(dest,np.array(data))

                dest = os.path.join(r'F:\server_tmp\pycharm_project_803\Data\CR_AM_20\CR_AM_20', malware_family, file, 'other')
                new_data = ''.join([new_data[i] for i in range(len(new_data))])
                try:
                    f = open(dest, 'wb')
                    f.write(new_data)
                    f.close()
                except IOError:
                    print("No such file or directory")
                    continue
                #np.save(dest,np.array(data))

            except ValueError :
                print('something wrong')

# -*- coding:utf-8 -*-
import axml
import mmap


class Manifest:
    def __init__(self, filename):
        fp = open(filename, "rb")
        mm = mmap.mmap(fp.fileno(), 0, access=mmap.ACCESS_READ)
        self.xml = axml.AXMLParser(mm)
        self.xml.parse()
        self.perm = []
        self.passClass = []
        self.__parse()

    def appendData(self, data):
        try:
            self.passClass.append("L" + data["name"].replace(".", "/") + ";")
        except KeyError:
            pass

    def __parse(self):
        for act in self.xml.activity:
            self.appendData(act)
        for rec in self.xml.receiver:
            self.appendData(rec)
        for ser in self.xml.service:
            self.appendData(ser)
        for pro in self.xml.provider:
            self.appendData(pro)
        self.appendData(self.xml.application)
        self.perm = self.xml.uer_permission
            
    def getPassClass(self):
        return self.passClass

    def getPackage(self):
        package = ["com.nhnent"]
        ''' # 추후 자동 설정 파일 만들 때 쓰자! 
        for act in self.xml.activity:
            if "intent-filter" in act:

                aName = act["name"]

                for item in act["intent-filter"]:
                    if item[0] == "action" and "MAIN" in item[1]:
                        splitName = aName.split(".")
                        if len(splitName) > 3:
                            aName = ".".join(splitName[:-3])
                            if aName not in package:
                                package.append(aName)
        '''
        if "package" in self.xml.app_info:
            if self.xml.app_info["package"] not in package and "com.nhnent" not in self.xml.app_info["package"]:
                package.append(self.xml.app_info["package"])

        return package


if __name__ == "__main__":
    import sys
    m = Manifest(sys.argv[1])
    m.parse()


'''
import xml.etree.ElementTree as ET


class Manifest:
    def __init__(self, filename):

        self.tree = ET.parse(filename)
        self.root = self.tree.getroot()
        self.activities = []
        self.services = []
        self.receivers = []
        self.application = []
        self.nameSpace = "{http://schemas.android.com/apk/res/android}"
        self.passClass = []     # 수정 불가 class 명 리스트
        self.modActivity = {}
        self.parse()

    def parse(self):
        #
        for act in self.root.iter("activity"):
            className = "L" + act.attrib[self.nameSpace + "name"].replace(".", "/") + ";"
            self.passClass.append(className)
            
            self.activities.append(className)

            if ((self.nameSpace + "exported") in act.attrib) and act.attrib[self.nameSpace + "exported"] == "true":
                self.passClass.append(className)
                continue

            child = act.getchildren()
            if len(child) > 0:
                self.passClass.append(className)
                continue

            # 이름 수정 가능한 activity 리스트
            self.modActivity[className] = act
            
        for ser in self.root.iter("service"):
            self.services.append("L" + ser.attrib[self.nameSpace + "name"].replace(".", "/") + ";")
        for rec in self.root.iter("receiver"):
            self.receivers.append("L" + rec.attrib[self.nameSpace + "name"].replace(".", "/") + ";")
        for app in self.root.iter("application"):
            self.application.append("L" + app.attrib[self.nameSpace + "name"].replace(".", "/") + ";")

        self.passClass += (self.services + self.receivers + self.application)

    def modification(self, obfClassInfo):
        for app in self.root.iter("application"):
            app.attrib[self.nameSpace + "name"] = "TESTTEST"

        ET.register_namespace('android', "http://schemas.android.com/apk/res/android")

        self.tree.write("output.xml", encoding="utf-8", xml_declaration=True, method="xml")


if __name__ == "__main__":
    import sys
    m = Manifest(sys.argv[1])
    m.parse()
    print m.modActivity.keys()
'''